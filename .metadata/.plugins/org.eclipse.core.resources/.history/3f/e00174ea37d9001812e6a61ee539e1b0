import java.util.HashMap;
import java.util.Random;
import com.ibm.broker.javacompute.MbJavaComputeNode;
import com.ibm.broker.plugin.MbElement;
import com.ibm.broker.plugin.MbException;
import com.ibm.broker.plugin.MbMessage;
import com.ibm.broker.plugin.MbMessageAssembly;
import com.ibm.broker.plugin.MbOutputTerminal;
import com.ibm.broker.plugin.MbUserException;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;


public class DigestAuthentication_ComputeResponse extends MbJavaComputeNode {

	public void evaluate(MbMessageAssembly inAssembly) throws MbException {
		MbOutputTerminal out = getOutputTerminal("out");
		MbOutputTerminal alt = getOutputTerminal("alternate");

		MbMessage inMessage = inAssembly.getMessage();
		MbMessageAssembly outAssembly = null;
		MbElement mb = inMessage.getRootElement();
		try {
			// create new message as a copy of the input
			MbMessage outMessage = new MbMessage(inMessage);
			outAssembly = new MbMessageAssembly(inAssembly, outMessage);
			// ----------------------------------------------------------
			// Add user code below

			String userName= inAssembly.getGlobalEnvironment().getRootElement().getFirstElementByPath("Variables/UserName").getValueAsString();
			String password= inAssembly.getGlobalEnvironment().getRootElement().getFirstElementByPath("Variables/Password").getValueAsString();
			String endPointUrl= inAssembly.getGlobalEnvironment().getRootElement().getFirstElementByPath("Variables/EndPointUrl").getValueAsString();
					
			String URI="";
			MbElement LocalEnv= inAssembly.getLocalEnvironment().getRootElement();
			MbElement yourVariable = LocalEnv.getFirstElementByPath("Destination/HTTP/RequestURL");
			String method = LocalEnv.getFirstElementByPath("Destination/HTTP/RequestLine").getFirstChild().getValue().toString();
			String URL= "";
			if(yourVariable == null || yourVariable.equals(null))
			{
			
				URL= endPointUrl;
			}
			else {
				URL = yourVariable.getValue().toString(); 
			}
			URI= URL.substring(URL.lastIndexOf(".org/") + 4);

			MbElement ResponseElement = mb.getFirstElementByPath("HTTPResponseHeader").getFirstChild();
			String authorizationHeader="ERROR";
	        authorizationHeader= getMD5ResponseHeader(userName,password,URI,method, ResponseElement);
			MbMessage outmb = outAssembly.getLocalEnvironment();
			outmb.evaluateXPath("?AuthorizationHeader[set-value('" + authorizationHeader	+ "')]");
		
			// End of user code
			// ----------------------------------------------------------
		} catch (MbException e) {
			// Re-throw to allow Broker handling of MbException
			throw e;
		} catch (RuntimeException e) {
			// Re-throw to allow Broker handling of RuntimeException
			System.out.print(e);
			throw e;
		} catch (Exception e) {
			// Consider replacing Exception with type(s) thrown by user code
			// Example handling ensures all exceptions are re-thrown to be handled in the flow
			throw new MbUserException(this, "evaluate()", "", "", e.toString(),
					null);
		}
		// The following should only be changed
		// if not propagating message to the 'out' terminal
		out.propagate(outAssembly);

	}

	
	 private static HashMap<String, String> parseHeader(String headerString) {
	        // seperte out the part of the string which tells you which Auth scheme is it
	        String headerStringWithoutScheme = headerString.substring(headerString.indexOf(" ") + 1).trim();
	        HashMap<String, String> values = new HashMap<String, String>();
	        String keyValueArray[] = headerStringWithoutScheme.split(",");
	        for (String keyval : keyValueArray) {
	            if (keyval.contains("=")) {
	                String key = keyval.substring(0, keyval.indexOf("="));
	                String value = keyval.substring(keyval.indexOf("=") + 1);
	                values.put(key.trim(), value.replaceAll("\"", "").trim());
	            }
	        }
	        return values;
	    }
	 
	 public static String getMD5(String input) {
	        try {
	            MessageDigest md = MessageDigest.getInstance("MD5");
	            byte[] messageDigest = md.digest(input.getBytes());
	            BigInteger number = new BigInteger(1, messageDigest);
	            String hashtext = number.toString(16);
	            // Now we need to zero pad it if you actually want the full 32 chars.
	            while (hashtext.length() < 32) {
	                hashtext = "0" + hashtext;
	            }
	            return hashtext;
	        }
	        catch (NoSuchAlgorithmException e) {
	            throw new RuntimeException(e);
	        }
	    }
	 
	 
	 
	 public static String getMD5ResponseHeader(String username, String password, String uri, String method, MbElement WWWAuthenticationElement) {
			String nodeName,responseSeed,ha1,ha2,mb1=null;
			String authorizationHeader = null;
			
				try {
					
					while(WWWAuthenticationElement != null){
						 nodeName = WWWAuthenticationElement.getName();
						if ("Www-Authenticate".equalsIgnoreCase(nodeName)){
							mb1 = WWWAuthenticationElement.getValueAsString();
					        }
						WWWAuthenticationElement=WWWAuthenticationElement.getNextSibling();
					}
										
					 HashMap<String, String> headerValues = parseHeader(mb1);
					 String nonce = headerValues.get("nonce");
					 String realm= headerValues.get("realm");
					 String qop= headerValues.get("qop");
					 String algorithm=headerValues.get("algorithm");
			     	 String cnonce = Integer.toString(Math.abs(new Random().nextInt()));
					 String ncvalue = "00000001";
					
					 if(algorithm=="MD5-sess"){ha1=  getMD5(getMD5(username + ":" + realm + ":" + password)+ ":" +nonce+ ":" +cnonce);}
					 else{ha1=  getMD5(username + ":" + realm + ":" + password);} 
					 ha2= getMD5(method + ":" + uri);
					 if(qop == "auth"){responseSeed = ha1 + ":" + nonce + ":" + ncvalue + ":" + cnonce + ":" + qop + ":" + ha2;}
				   	 else{responseSeed = ha1 + ":" + nonce + ":" + ha2;}
					 String response = getMD5(responseSeed);
					 authorizationHeader  = "Digest username=\"" + username + "\", realm=\"";
					 authorizationHeader += realm + "\", nonce=\"" + nonce + "\",";
					 authorizationHeader += " uri=\"" + uri + "\", cnonce=\"" + cnonce;
					 authorizationHeader += "\", nc=" +ncvalue + ", response=\"" + response;
				
					 
				} catch (MbException e) {
					e.printStackTrace();
				}
		 
	
			return authorizationHeader;
	 }
	}
